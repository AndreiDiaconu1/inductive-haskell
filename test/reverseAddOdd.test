val addOne(x @ Int) @ Int = x + 1;;

val addTwo(x @ Int) @ Int = x + 2;;

val isOdd(x @ Int) @ Bool = 
    if x mod 2 = 0 
    then false
    else true;;

rec reverse1(xs @ [Int], ys @ [Int]) @ [Int] = 
    if xs = nil
    then ys
    else reverse1(tail(xs), head(xs):ys);;

val reverse(xs @ [a]) @ [a] = reverse1(xs, nil);;

-- Target program
--   target = reverse.gen2
--   gen2 = gen4.gen4
--   gen4 = gen6.gen7
--   gen7 = map addTwo
--   gen6 = filter isOdd

NEX target (list(1,2,3)) => list(5,4) ;;
NEX target (list(1,2,3)) => list(5,4) ;;
PEX target (list(1,2,3,4)) => list(7,5) ;;
PEX target (list(5,6,7)) => list(11,9) ;;
SYNTH target(xs @ [Int]) @ [Int];;
