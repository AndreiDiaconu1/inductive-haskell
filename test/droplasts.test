--val addOne(x @ Int) @ Int = x + 1;;

--val addTwo(x @ Int) @ Int = x + 2;;

--val isOdd(x @ Int) @ Bool = 
--    if x mod 2 = 0 
--    then false
--    else true;;

rec reverse1(xs @ [a], ys @ [a]) @ [a] = 
    if xs = nil
    then ys
    else reverse1(tail(xs), head(xs):ys);;

-- val id(x @ a) @ a = x;;

val tl(xs @ [a]) @ [a] = if xs = nil then nil else tail(xs);;

val reverse(xs @ [a]) @ [a] = reverse1(xs, nil);;

-- Target program
--   target = gen1.gen2 
--   gen2 = reverse.gen5
--   gen5 = map reverse 
--   gen1 = gen2.gen9   
--   gen9 = tl.gen12
--   gen12 = map tl

NEx target (list(list(1,2), list(1,2,3,4))) => list(list(5)) ;;
NEx target (list(list(1,2,5), list(2))) => list(list(1,2,3,4)) ;;
PEx target (list(list(1,2,3),list(2,3),list(3,4))) => list(list(1,2), list(2)) ;;
PEx target (list(list(5,6), list(6))) => list(list(5)) ;;
Synthesize target(xs @ [[Int]]) @ [[Int]];;
