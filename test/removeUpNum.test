-- isUpperCase, isLowerCase, isAlpha, isDigit are all primitives
-- borrowed from Haskell

val mIsUpper(x@Char)@Bool = isUpperCase(x);;
-- val mIsLower(x@Char)@Bool = isLowerCase(x);;
val mIsAlpha(x@Char)@Bool = isAlpha(x);;
val mIsDigit(x@Char)@Bool = isDigit(x);;
val not(x@Bool)@Bool = if x = true then false else true;;

-- Target program:
--   target = gen1.gen2
--   gen2 = filter mIsAlpha
--   gen1 = filter gen6
--   gen6 = not.mIsUpper

-- If `not` is removed and `mIsLower` is added, the target
-- becomes much shorter: `target = mIsLower`.

NEX target (list('a', 'B', 'C', '1', '2')) => list('a', 'B') ;;
NEX target (list('a', 'B', 'C', '1')) => list('a', 'B') ;;
PEX target (list('a', 'B', 'C', '1', '2')) => list('a') ;;
PEX target (list('a', 'B', 'C', '1', 'b', 'c')) => list('a', 'b', 'c') ;;
SYNTH target(xs @ [Char]) @ [Char];;
